// Code generated by MockGen. DO NOT EDIT.
// Source: internal/broadcaster/controller/subscriber.go
//
// Generated by this command:
//
//	mockgen --source=internal/broadcaster/controller/subscriber.go --destination=internal/mocks/mock_subscriber.go --package=mocks --mock_names=Broadcaster=MockBroadcaster
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBroadcaster is a mock of Broadcaster interface.
type MockBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcasterMockRecorder
	isgomock struct{}
}

// MockBroadcasterMockRecorder is the mock recorder for MockBroadcaster.
type MockBroadcasterMockRecorder struct {
	mock *MockBroadcaster
}

// NewMockBroadcaster creates a new mock instance.
func NewMockBroadcaster(ctrl *gomock.Controller) *MockBroadcaster {
	mock := &MockBroadcaster{ctrl: ctrl}
	mock.recorder = &MockBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcaster) EXPECT() *MockBroadcasterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockBroadcaster) Broadcast(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", msg)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockBroadcasterMockRecorder) Broadcast(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockBroadcaster)(nil).Broadcast), msg)
}
